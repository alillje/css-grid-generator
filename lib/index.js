(()=>{"use strict";var t={d:(r,e)=>{for(var o in e)t.o(e,o)&&!t.o(r,o)&&Object.defineProperty(r,o,{enumerable:!0,get:e[o]})},o:(t,r)=>Object.prototype.hasOwnProperty.call(t,r),r:t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},r={};t.r(r),t.d(r,{gridlify:()=>s});const e=Object.freeze({PIXELS:"px",FR:"fr",PERCENT:"%"}),o=Object.freeze({AUTO:"auto",MINCONTENT:"min-content"});class a{validate(t){if(!this.isArray(t))throw new Error("Row and column values must be contained in an Array");for(const r of t){if(!this.isString(r))throw new Error("Input must be a string");if(!this.hasCorrectSuffix(r)&&!this.isSizingKeyword(r))throw new Error("Input must end with a valid CSS measurement (px, fr, %) or a css sizing keyword");if(!this.isSizingKeyword(r)&&!this.isNumber(r))throw new Error("Row and column values must be numbers followed by a CSS unit prefix")}}hasCorrectSuffix(t){return!!Object.values(e).some((r=>t.endsWith(r)))}removeUnitSuffix(t){const r=this.getUnitSuffix(t);if(r)return t.replace(r,"")}getUnitSuffix(t){for(const r of Object.values(e))if(t.endsWith(r))return r}isSizingKeyword(t){return!!Object.values(o).some((r=>t.endsWith(r)))}isNumber(t){let r=!0;const e=this.removeUnitSuffix(t);return("number"!=typeof parseInt(e)||isNaN(e))&&(r=!1),r}isArray(t){return!!Array.isArray(t)}isString(t){return"string"==typeof t}}class i extends a{validate(t){if("string"!=typeof t)throw new Error("Gap value must be a string");if(!this.hasCorrectSuffix(t))throw new Error("Gap value must end with a valid CSS measurement");if(!this.isNumber(t))throw new Error("Gap values must be numbers")}}class n{#t;#r;constructor(){this.#t=new a,this.#r=new i}validateParams(t,r,e,o){this.#t.validate(t),this.#t.validate(r),this.#r.validate(e),this.#r.validate(o)}validatePositions(t){const r=Object.assign({},t);for(const[t,e]of Object.entries(r))!isNaN(e)&&e&&"boolean"!=typeof e||(r[t]=void 0);if(!r.startRow||!r.startColumn)throw new Error("Start values for row and column is mandatory");return r}isString(t){if(this.#r.isString(t))return!0;throw new Error("HTML element identifier must be a string")}}const s=new class{#e;#t;#r;constructor(){this.#e=new n,this.#t=new a,this.#r=new i}getGridCss({rows:t=["100%"],columns:r=["100%"],rowGap:e="0px",columnGap:o="0px"}){try{return this.#e.validateParams(t,r,e,o),`{ \n  display: grid;\n  grid-template-rows: ${t.join(" ")};\n  grid-template-columns: ${r.join(" ")};\n  grid-row-gap: ${e};\n  grid-column-gap: ${o};\n}`}catch(t){return console.error(t),null}}getPositionCss({startRow:t,endRow:r,startColumn:e,endColumn:o}){try{let a="";const i={startRow:t,startColumn:e,endRow:r,endColumn:o},n=this.#e.validatePositions(i);return n.startRow&&n.startColumn&&(a=`{ grid-area: ${parseInt(n.startRow)} / ${parseInt(n.startColumn)} / ${n.endRow?parseInt(n.endRow):parseInt(n.startRow)} / ${n.endColumn?parseInt(n.endColumn):parseInt(n.startColumn)}; }`),a}catch(t){return console.error(t),null}}setGrid({rows:t=["100%"],columns:r=["100%"],rowGap:e="0px",columnGap:o="0px"},a){try{if(this.#e.validateParams(t,r,e,o),!this.#t.isString(a))throw new Error("HTML element identifier must be a string");a&&(document.querySelector(a).style.display="grid",document.querySelector(a).style.gridTemplateRows=`${t.join(" ")}`,document.querySelector(a).style.gridTemplateColumns=`${r.join(" ")}`,document.querySelector(a).style.gridRowGap=`${e}`,document.querySelector(a).style.gridColumnGap=`${o}`)}catch(t){console.error(t)}}setPostition({startRow:t,endRow:r,startColumn:e,endColumn:o},a){try{const i={startRow:t,startColumn:e,endRow:r,endColumn:o},n=this.#e.validatePositions(i);n.startRow&&n.startColumn&&(document.querySelector(a).style.gridRow=`${parseInt(n.startRow)} / ${n.endRow?parseInt(n.endRow):parseInt(n.startRow)}`,document.querySelector(a).style.gridColumn=`${parseInt(n.startColumn)} / ${n.endColumn?parseInt(n.endColumn):parseInt(n.startColumn)}`)}catch(t){console.error(t)}}setRows(t,r){try{this.#t.validate(t),this.#e.isString(r)&&(document.querySelector(r).style.gridTemplateRows=`${t.join(" ")}`)}catch(t){console.error(t)}}setColumns(t,r){try{this.#t.validate(t),this.#e.isString(r)&&(document.querySelector(r).style.gridTemplateColumns=`${t.join(" ")}`)}catch(t){console.error(t)}}setRowGap(t,r){try{this.#r.validate(t),this.#e.isString(r)&&(document.querySelector(r).style.gridRowGap=`${t}`)}catch(t){console.error(t)}}setColumnGap(t,r){try{this.#r.validate(t),this.#e.isString(r)&&(document.querySelector(r).style.gridColumnGap=`${t}`)}catch(t){console.error(t)}}};module.exports=r})();